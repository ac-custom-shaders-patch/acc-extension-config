ac.getCurrentTime(): number
ac.getDaySeconds(): number
ac.getDayOfTheYear(): number
ac.getTimeMultiplier(): number
ac.getSunDirection(): vec3
ac.getSunDirectionTo(r: vec3)
ac.getMoonDirection(): vec3
ac.getMoonDirectionTo(r: vec3)
ac.getMoonFraction(): number
ac.getAltitude(): number
ac.getSunAltitude(): number
ac.getTrackCoordinates(): vec2
ac.getInputDate(): uint64
ac.getRealTrackHeadingAngle(): number
ac.getTimeZoneOffset(): number
ac.getTimeZoneDstOffset(): number
ac.getTimeZoneBaseOffset(): number
ac.getConditionsSet(): ac.ConditionsSet
ac.getConditionsSetTo(r: ac.ConditionsSet)
ac.getPpFilter(): string
ac.setAsyncTextureLoading(active: boolean)
ac.getSkyAbsorption(dir: vec3): rgb
ac.setBrightnessMult(v: number)
ac.setOverallSkyBrightnessMult(v: number)
ac.setVAOExponent(v: number)
ac.adjustTrackVAO(exponent: number = 0.7, from: number = 0, to: number = 1)
ac.adjustDynamicAOSamples(exponent: number = 0.7, from: number = 0, to: number = 1)
ac.getVAOMinMax(): vec2
ac.setTrackHeatFactor(v: number)
ac.getSkyAbsorptionTo(r: rgb, dir: vec3)
ac.fixHeading(dir: vec3): vec3
ac.fixHeadingSelf(dir: vec3)
ac.fixHeadingInv(dir: vec3): vec3
ac.fixHeadingInvSelf(dir: vec3)
ac.setShadows(value: ac.ShadowsState)
ac.resetShadowsResolution()
ac.setShadowsResolution(value: number)
ac.resetShadowsSplits()
ac.setShadowsSplits(interior: vec3, exterior: vec3)
ac.setFogAlgorithm(value: ac.FogAlgorithm)
ac.setFogColor(c: rgb)
ac.setFogBlend(blend: number)
ac.setFogDistance(distance: number)
ac.setFogBacklitExponent(value: number)
ac.setFogBacklitMultiplier(value: number)
ac.setFogExponent(value: number)
ac.setFogHeight(value: number)
ac.setFogDensity(value: number)
ac.setLightDirection(dir: vec3)
ac.setCameraExposure(value: number)
ac.setCarExposureActive(value: boolean)
ac.setLightColor(c: rgb)
ac.setLightShadowOpacity(value: number)
ac.getCloudsShadow(): number
ac.setCloudShadowMaps(value: boolean)
ac.setCloudShadowIndependantOpacity(value: boolean)
ac.setCloudShadowDistance(value: number)
ac.setCloudShadowScalingFactor(value: number)
ac.setCloudArcMultiplier(value: number)
ac.setAmbientColor(c: rgb)
ac.setBaseAmbientColor(c: rgb)
ac.setExtraAmbientColor(c: rgb)
ac.setExtraAmbientDirection(c: vec3)
ac.setCloudsLight(dir: vec3, color: rgb, earthRadius: number = 6371e3)
ac.resetCloudsLight()
ac.isRainFxActive(): boolean
ac.getRainAmount(): number
ac.setRainAmount(v: number)
ac.setRainWetness(v: number)
ac.setReflectionsBrightness(v: number)
ac.setReflectionsSaturation(v: number)
ac.setCameraOcclusionDepthBoost(v: number)
ac.setSunColor(c: rgb)
ac.setSkyStarsMap(v: string)
ac.setSkyMoonTexture(v: string)
ac.getSkyStarsMapState(): ac.TextureState
ac.getSkyMoonTextureState(): ac.TextureState
ac.unloadTexture(v: string)
ac.setSkyColor(c: rgb)
ac.setSkyAnisotropicIntensity(v: number)
ac.setSkyMultiScatterPhase(v: number)
ac.setSkyBrightnessMult(v: number)
ac.setSkySunMoonSizeMultiplier(v: number)
ac.setSkyMoonBaseColor(v: rgb)
ac.setSkyMoonMieExp(v: number)
ac.setSkyMoonMieMultiplier(v: number)
ac.setSkyMoonBrightness(v: number)
ac.setSkyMoonOpacity(v: number)
ac.setSkyMoonDepthSkip(v: boolean)
ac.setSkyStarsColor(v: rgb)
ac.setSkyStarsBrightness(v: number)
ac.setSkyStarsSaturation(v: number)
ac.setSkyStarsExponent(v: number)
ac.setSkyPlanetsBrightness(v: number)
ac.setSkyPlanetsOpacity(v: number)
ac.setSkyPlanetsSizeBase(v: number)
ac.setSkyPlanetsSizeVariance(v: number)
ac.setSkyPlanetsSizeMultiplier(v: number)
ac.setSkyUseV2(v: boolean)
ac.setSkyZenithOffset(v: number)
ac.setSkyZenithDensityExp(v: number)
ac.setSkyInputYOffset(v: number)
ac.setSkyDensity(v: number)
ac.setSkySunBaseColor(v: rgb)
ac.setSkySunBrightness(v: number)
ac.setSkySunMieExp(v: number)
ac.setSkyV2RefractiveIndex(side: ac.SkyRegion, v: number)
ac.setSkyV2DepolarizationFactor(side: ac.SkyRegion, v: number)
ac.setSkyV2Luminance(side: ac.SkyRegion, v: number)
ac.setSkyV2MieCoefficient(side: ac.SkyRegion, v: number)
ac.setSkyV2MieDirectionalG(side: ac.SkyRegion, v: number)
ac.setSkyV2MieZenithLength(side: ac.SkyRegion, v: number)
ac.setSkyV2MieV(side: ac.SkyRegion, v: number)
ac.setSkyV2NumMolecules(side: ac.SkyRegion, v: number)
ac.setSkyV2Rayleigh(side: ac.SkyRegion, v: number)
ac.setSkyV2YOffset(side: ac.SkyRegion, v: number)
ac.setSkyV2YScale(side: ac.SkyRegion, v: number)
ac.setSkyV2RayleighZenithLength(side: ac.SkyRegion, v: number)
ac.setSkyV2SunIntensityFactor(side: ac.SkyRegion, v: number)
ac.setSkyV2SunIntensityFalloffSteepness(side: ac.SkyRegion, v: number)
ac.setSkyV2Turbidity(side: ac.SkyRegion, v: number)
ac.setSkyV2SunShapeMult(side: ac.SkyRegion, v: number)
ac.setSkyV2SunSaturation(side: ac.SkyRegion, v: number)
ac.setSkyV2BackgroundLight(side: ac.SkyRegion, v: number)
ac.setSkyV2Saturation(side: ac.SkyRegion, v: number)
ac.setSkyV2Gamma(side: ac.SkyRegion, v: number)
ac.setSkyV2MieKCoefficient(side: ac.SkyRegion, v: vec3)
ac.setSkyV2Primaries(side: ac.SkyRegion, v: vec3)
ac.setSkyV2Rainbow(v: number)
ac.setSkyV2RainbowSecondary(v: number)
ac.setSkyV2RainbowDarkening(v: number)
ac.setSkyV2GradientDirection(v: vec3)
ac.resetSpecularColor()
ac.setSpecularColor(c: rgb)
ac.resetEmissiveMultiplier()
ac.setEmissiveMultiplier(v: number)
ac.resetReflectionEmissiveBoost()
ac.setReflectionEmissiveBoost(v: number)
ac.resetGlowBrightness()
ac.setGlowBrightness(v: number)
ac.resetGodraysCustomColor()
ac.setGodraysCustomColor(c: rgb)
ac.resetGodraysCustomDirection()
ac.setGodraysCustomDirection(v: vec3)
ac.setGodraysLength(v: number)
ac.setGodraysGlareRatio(v: number)
ac.setGodraysAngleAttenuation(v: number)
ac.setGodraysNoiseFrequency(v: number)
ac.setGodraysNoiseMask(v: number)
ac.setGodraysDepthMapThreshold(v: number)
ac.setGlareThreshold(v: number)
ac.setGlareBloomFilterThreshold(v: number)
ac.setGlareBloomLuminanceGamma(v: number)
ac.setGlareStarFilterThreshold(v: number)
ac.setPpColorTemperatureK(v: number)
ac.setPpWhiteBalanceK(v: number)
ac.setPpHue(v: number)
ac.setPpSepia(v: number)
ac.setPpSaturation(v: number)
ac.setPpBrightness(v: number)
ac.setPpContrast(v: number)
ac.setColorTexturesGamma(v: number)
ac.setPpTonemapFunction(v: ac.TonemapFunction)
ac.setPpTonemapExposure(v: number)
ac.setPpTonemapGamma(v: number)
ac.setPpTonemapUseHdrSpace(v: boolean)
ac.setPpTonemapMappingFactor(v: number)
ac.setPpTonemapFilmicContrast(v: number)
ac.setPpColorGradingIntensity(v: number)
ac.isPpActive(): boolean
ac.getGodraysLength(): number
ac.getGodraysGlareRatio(): number
ac.getGodraysAngleAttenuation(): number
ac.getGodraysNoiseFrequency(): number
ac.getGodraysNoiseMask(): number
ac.getGodraysDepthMapThreshold(): number
ac.getGlareThreshold(): number
ac.getGlareBloomFilterThreshold(): number
ac.getGlareStarFilterThreshold(): number
ac.getPpColorTemperatureK(): number
ac.getPpWhiteBalanceK(): number
ac.getPpHue(): number
ac.getPpSepia(): number
ac.getPpSaturation(): number
ac.getPpBrightness(): number
ac.getPpContrast(): number
ac.getPpTonemapFunction(): number
ac.getPpTonemapExposure(): number
ac.getPpTonemapGamma(): number
ac.getPpTonemapMappingFactor(): number
ac.getPpTonemapFilmicContrast(): number
ac.getPpTonemapUseHdrSpace(): number
ac.getPpGodraysEnabled(): boolean
ac.getPpDofEnabled(): boolean
ac.getPpDofActive(): boolean
ac.getPpChromaticAbberationActive(): boolean
ac.getPpGlareGhostActive(): boolean
ac.getPpHeatParticleActive(): boolean
ac.getPpAirydiskEnabled(): boolean
ac.getPpAntialiasingEnabled(): boolean
ac.getPpAutoExposureEnabled(): boolean
ac.getPpChromaticAbberationEnabled(): boolean
ac.getPpFeedbackEnabled(): boolean
ac.getPpLensDistortionEnabled(): boolean
ac.getPpHeatParticleEnabled(): boolean
ac.getPpGlareEnabled(): boolean
ac.getPpGlareAnamorphicEnabled(): boolean
ac.setPpTonemapViewportScale(v: vec2)
ac.setPpTonemapViewportOffset(v: vec2)
ac.setHeatParticles(v: boolean)
ac.isVertexAoPatchApplied(): boolean
ac.isTrackAmbientLowerMultiplierDefined(): boolean
ac.getTrackAmbientLowerMultiplier(): number
ac.getTrackLightPollution(): ac.LightPollution
ac.getWeatherStaticAmbientLowerMultiplier(): number
ac.setWeatherStaticAmbient(upper: rgb, lower: rgb)
ac.resetWeatherStaticAmbient()
ac.setEmissiveCameraGain(direct: number, mirror: number)
ac.setExtraAsphaltReflectionsMultiplier(value: number)
ac.setCloudsSorting(active: boolean)
ac.sortClouds()
ac.setParticlesSmokeMaterial(material: ac.ParticlesMaterial)
ac.setParticlesGrassMaterial(material: ac.ParticlesMaterial)
ac.setParticlesGrassPiecesMaterial(material: ac.ParticlesMaterial)
ac.setWeatherFakeShadowOpacity(v: number)
ac.setWeatherFakeShadowConcentrarion(v: number)
ac.setWeatherFakeShadowConcentration(v: number)
ac.setWeatherDynamicAmbientMultiplier(v: number)
ac.setWeatherDynamicAmbientSaturation(v: number)
ac.setWeatherDynamicAmbientGamma(v: number)
ac.setWeatherDynamicAmbientBrightness(v: number)
ac.setWeatherBouncedLightMultiplier(v: rgb)
ac.setWeatherBouncedInteriorLightMultiplier(v: rgb)
ac.setWeatherBouncedLightShDirection(v: vec3)
ac.setWeatherBouncedLightShMultiplier(v: number)
ac.setWeatherBouncedLightShSaturation(v: number)
ac.getWeatherLightsMultiplier(): number
ac.setWeatherLightsMultiplier(value: number)
ac.setWeatherTrackLightsMultiplierThreshold(value: number)
ac.resetWeatherLightsMultiplier()
ac.getAutoExposure(): number
ac.setAutoExposureActive(v: boolean)
ac.setAutoExposureInfluencedByGlare(v: boolean)
ac.setAutoExposureTarget(v: number)
ac.setAutoExposureMeasuringArea(center: vec2, size: vec2)
ac.setAutoExposureLimits(min: number, max: number)
ac.setSkyFogMultiplier(v: number)
ac.setHorizonFogMultiplier(horizon: number, exp: number, rangeMult: number)
ac.resetHorizonFogMultiplier()
ac.calculateSkyFog(v: vec3): number
ac.fixSkyColorCalculateOrder(value: boolean)
ac.fixSkyColorCalculateResult(value: boolean)
ac.fixSkyV2Fog(value: boolean)
ac.fixCloudsV2Fog(value: boolean)
ac.testFrustumIntersection(v: vec3, radius: number, applyFixHeading: boolean = true): boolean
ac.calculateSkyColor(v: vec3, includeSkyColor: boolean, includeMoonColor: boolean): rgb
ac.calculateSkyColorTo(r: rgb, v: vec3, includeSkyColor: boolean, includeMoonColor: boolean)
ac.calculateSkyColorV2(v: vec3, includeSkyColor: boolean, includeMoonColor: boolean): rgb
ac.calculateSkyColorV2To(r: rgb, v: vec3, includeSkyColor: boolean, includeMoonColor: boolean)
ac.calculateSkyColorNoGradients(v: vec3, includeSkyColor: boolean, includeMoonColor: boolean): rgb
ac.calculateSkyColorNoGradientsTo(r: rgb, v: vec3, includeSkyColor: boolean, includeMoonColor: boolean)
ac.sampleSH(v: vec3): rgb
ac.sampleSHTo(r: rgb, v: vec3)
ac.sampleCameraAO(r: rgb): number
ac.getCameraOcclusion(look: vec3): number
ac.getCameraLookOcclusion(): number
ac.isBouncedLightActive(): boolean
ac.generateCloudMap(settings: ac.SkyCloudMapParams)
ac.setManualCloudsInvalidation(value: boolean)
ac.invalidateCloudMaps()
ac.setAiHeadlights(v: boolean)
ac.loadSoundbank(soundbank: string, guids: string): boolean
render.isVisible(center: vec3, radius: number): boolean
render.setBlendMode(mode: render.BlendMode)
render.setCullMode(mode: render.CullMode)
render.setDepthMode(mode: render.DepthMode)
render.glSetColor(color: rgbm)
render.glBegin(primitiveType: render.GLPrimitiveType)
render.glVertex(v: vec3)
render.glVertexTextured(v: vec3, uv: vec2)
render.glTexture(filename: string)
render.glEnd()
render.debugSphere(center: vec3, radius: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugCross(center: vec3, size: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugPoint(center: vec3, size: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugPlane(center: vec3, dir: vec3, color: rgbm = rgbm(3, 0, 0, 1), size: number = 1)