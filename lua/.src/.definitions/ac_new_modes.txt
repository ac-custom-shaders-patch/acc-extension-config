ac.setStartMessage(message: string, icon: string = "DRIVE"): boolean
ac.endSession(message: string, successfulRun: boolean = true): boolean
ac.loadSoundbank(soundbank: string, guids: string): boolean
render.isVisible(center: vec3, radius: number): boolean
render.setBlendMode(mode: render.BlendMode)
render.setCullMode(mode: render.CullMode)
render.setDepthMode(mode: render.DepthMode)
render.glSetColor(color: rgbm)
render.glBegin(primitiveType: render.GLPrimitiveType)
render.glVertex(v: vec3)
render.glVertexTextured(v: vec3, uv: vec2)
render.glTexture(filename: string)
render.glEnd()
render.debugSphere(center: vec3, radius: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugCross(center: vec3, size: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugPoint(center: vec3, size: number, color: rgbm = rgbm(3, 0, 0, 1))
render.debugPlane(center: vec3, dir: vec3, color: rgbm = rgbm(3, 0, 0, 1), size: number = 1)
ui.beginToolWindow(windowId: string, pos: vec2, size: vec2)
ui.endToolWindow()
ui.beginTransparentWindow(windowId: string, pos: vec2, size: vec2)
ui.endTransparentWindow()
ui.text(text: string)
ui.textAligned(text: string, alignment: vec2, size: vec2 = vec2())
ui.textWrapped(text: string)
ui.textColored(text: string, color: rgbm)
ui.icon24(iconId: string, size: vec2, tintCol: rgbm = rgbm(1, 1, 1, 1))
ui.icon32(iconId: string, size: vec2, tintCol: rgbm = rgbm(1, 1, 1, 1))
ui.icon64(iconId: string, size: vec2, tintCol: rgbm = rgbm(1, 1, 1, 1))
ui.getCursor(): vec2
ui.setCursor(v: vec2)
ui.getCursorX(): number
ui.setCursorX(v: number)
ui.getCursorY(): number
ui.setCursorY(v: number)
ui.offsetCursorX(v: number)
ui.offsetCursorY(v: number)
ui.sameLine(offsetFromStart: number = 0, spacing: number = -1)
ui.drawImage(filename: string, p1: vec2, p2: vec2, color: rgbm = rgbm(1, 1, 1, 1), uv1: vec2 = vec2(), uv2: vec2 = vec2(1, 1), keepAspectRatio: boolean = false)
ui.drawImageQuad(filename: string, p1: vec2, p2: vec2, p3: vec2, p4: vec2, color: rgbm = rgbm(1, 1, 1, 1), uv1: vec2 = vec2(), uv2: vec2 = vec2(1, 0), uv3: vec2 = vec2(1, 1), uv4: vec2 = vec2(0, 1))
ui.drawQuadFilled(p1: vec2, p2: vec2, p3: vec2, p4: vec2, color: rgbm = rgbm(1, 1, 1, 1))
ui.drawQuad(p1: vec2, p2: vec2, p3: vec2, p4: vec2, color: rgbm = rgbm(1, 1, 1, 1))
ui.setShadingOffset(texBrightness: number = 1, texOffset: number = 0, alphaMult: number = 1, alphaOffset: number = 0)
ui.beginTextureShade(filename: string)
ui.endTextureShade(p1: vec2, p2: vec2, uv1: vec2 = vec2(), uv2: vec2 = vec2(1, 1), clamp: boolean = true)
ui.beginGradientShade()
ui.endGradientShade(p1: vec2, p2: vec2, col1: rgbm = rgbm(1, 1, 1, 1), col2: rgbm = rgbm(1, 1, 1, 1))
ui.pushClipRect(p1: vec2, p2: vec2, intersectWithExisting: boolean = true)
ui.popClipRect()
ui.drawRect(p1: vec2, p2: vec2, color: rgbm, rounding: number = 0, roundingFlags: number = 15, thickness: number = 1)
ui.drawRectFilled(p1: vec2, p2: vec2, color: rgbm, rounding: number = 0, roundingFlags: number = 15)
ui.drawLine(p1: vec2, p2: vec2, color: rgbm, thickness: number = 1)
ui.drawCircle(p1: vec2, radius: number, color: rgbm, numSegments: number = 12, thickness: number = 1)
ui.drawCircleFilled(p1: vec2, radius: number, color: rgbm, numSegments: number = 12)
ui.drawEllipseFilled(p1: vec2, radius: vec2, color: rgbm, numSegments: number = 12)
ui.beginTextureSaturationAdjustment()
ui.endTextureSaturationAdjustment(value: number)
ui.beginOutline()
ui.endOutline(color: rgbm)
ui.beginRotation()
ui.endRotation(deg: number)
ui.endPivotRotation(deg: number, pivot: vec2, offset: vec2 = vec2())
ui.beginScale()
ui.endScale(scale: vec2)
ui.beginTransformMatrix()
ui.endTransformMatrix(mat: mat3x3)
ui.popStyleVar(count: number = 1)
ui.pushStyleColor(varId: number, value: rgbm)
ui.popStyleColor(count: number = 1)
ui.pushFont(fontType: number)
ui.popFont()
ui.rectHovered(p1: vec2, p2: vec2): boolean
ui.mouseClicked(button: number = 0): boolean
ui.mouseDown(button: number = 0): boolean
ui.mouseDoubleClicked(button: number = 0): boolean
ui.mousePos(): vec2
ui.acText(text: string, letter: vec2, marginOffset: number = 0, color: rgbm = rgbm(1, 1, 1, 1))
ui.pushACFont(name: string)
ui.popACFont()