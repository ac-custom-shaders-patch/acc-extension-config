[ABOUT]
AUTHOR = Rusty, CheesyManiac

[DEFORMING_HOOD]
NAME = FRONT_HOOD
OFFSET_Y_MIDDLE = 0.04
OFFSET_Y_END = 0.04
OFFSET_Z_END = 0.03
BULGING_EXTRA = 0.05
BULGING_EXPONENT = 2.5
NOISE_Y_AMPLITUDE = 0.4
NOISE_Z_AMPLITUDE = 0.4
NOISE_Y_FREQENCY = 2.0
NOISE_Z_FREQENCY = 3.0
Z_FACTOR = 2.5
Z_BIAS = -0.15

[EXTRA_FX_EMISSIVE_...]
MATERIALS = EXT_Lights
COLOR = 0.2

[EXTRA_FX_EMISSIVE_...]
MATERIALS = shader:ksBrakeDisc?
RANGE = 0.1
COLOR = 10

[EXTRA_FX_EMISSIVE_...]
DIGITAL_INSTRUMENTS = RPM_DISPLAY
COLOR = 10
RANGE = 0.2

[INCLUDE: common/gt3_exhaust_glow.ini]
ExhaustPoint = 0.35, 0.31, -1.7
ExhaustLightPoint = 0.35, 0.31, -1.9
ExhaustMeshes_MultiMap = material:EXT_Engine_Bottom 

[LIGHT_EXTRA_0_EXHAUST_GLOW, LIGHT_EXTRA_1_EXHAUST_GLOW]
BOUND_TO = GEO_Chassis_SUB5

[INCLUDE: common/gt3_tyres_kunos.ini]

[EXTRA_FX]
DELAYED_RENDER = GEO_Int_Glass_SUB1

[INCLUDE: common/materials_carpaint.ini]
CarPaintMaterial=EXT_Carpaint
[Material_CarPaint_Metallic]

[INCLUDE: common/materials_glass.ini]
ExteriorGlassHeadlightsMaterials=EXT_Glass_light
ExteriorGlassFilmedMaterials=EXT_Glass

[Material_Glass]
Materials=EXT_Glass_Yellow
MaskPass=1
ExtraLightsAdjustment=0.02
MaskPassColor=60,40,0
ThicknessMult=1.2
FilmIOR=1.5

[INCLUDE: common/selflighting.ini]
[SelfLight_Headlights]
POSITION=0, 0.449, 2.32
MIRROR=0.689
SPECULAR_MULT=1
SPOT=120
RANGE=0.4
DIRECTION=0.2,0,1
BIND_TO_HEADLIGHTS=1

[INCLUDE: common/custom_emissive.ini]
[CustomEmissive]
Meshes = "{ Lod:A & LIGHT_F_light, Lod:B & GEO_Chassis_SUB12, Lod:C & EXT_Lights }"
MirrorDir = 1,0,0
@MIXIN = CustomEmissive_Color, Channel = 3, Mirror, "Color = 0.5, 0.5, 0.5"
@MIXIN = TurningLights, Channel = 3, "Color = 1,0.33,0", Intensity = 50

[CustomEmissive]
Meshes = LIGHT_R_PIT
Resolution = 1024, 1024
AreasSubtractNext = 1;
@ = CustomEmissive_Circle, Channel = 2, Mirror, Center = "854,173", Size = 260
@ = CustomEmissive_Circle, Channel = 3, Center = "854,173", Size = 79
@ = TurningLights, Channel = 2, Color="2,1,0", Intensity=1000
@ = ReverseLights, Channel = 3, Color="1,1,1", Intensity=1000
@ = CustomEmissive_UseDiffuseLuminocity

[SHADER_REPLACEMENT_...]
MATERIALS=EXT_Lights_chrom
PROP_...=extColoredReflection,1
PROP_...=ksSpecularEXP,900

[INCLUDE: common/materials_interior.ini]

[Material_Carbon]
Materials=INT_Occ_CARBON_Ferrari
UseClearCoat=0
Brightness=0.5
DetailScale=950

[Material_Velvet_v2]
Materials=INT_Occ_Alcantara,INT_Occ_FABRIC_Seat_base
DetailScale=200
Brightness=0.3
ApplyTilingFix=1

[Material_Metal_v2]
Materials=INT_Decals_Metal_chrome
DetailScale=0
CubemapReflectionBlur=0.5

[Material_InteriorPBRDetail]
Materials=INT_Display_Extra
Brightness=0.8
ColorSource=DIFFUSE

[Material_Plastic]
Materials=INT_Occ_RUBBER_Steer
Brightness=0.5
Smoothness=0

[Material_InteriorPBRDetail]
Materials=INT_Occ_METAL_ALu
Brightness=0.5
CubemapReflectionBlur=0.5

[Material_Metal_v2]
Materials=INT_Decals_Metal_base
CubemapReflectionBlur=0.5
Metalness=0.3

[Material_InteriorPBRDetail]
Materials=INT_Decals_Plastic

[SHADER_REPLACEMENT_...]
MATERIALS=EXT_Carbon_260
PROP_...=fresnelEXP,5
PROP_...=fresnelC,0.04
PROP_...=fresnelMaxLevel,0.3
PROP_...=ksAmbient,0.2
PROP_...=ksDiffuse,0.1
PROP_...=detailUVMultiplier,300
PROP_...=ksSpecularEXP,60

[SHADER_REPLACEMENT_...]
MATERIALS=EXT_Rims
PROP_...=fresnelEXP,5
PROP_...=fresnelC,0.2
PROP_...=fresnelMaxLevel,0.5
PROP_...=isAdditive,2
PROP_...=ksSpecularEXP,800
PROP_...=ksSpecular,0.01
PROP_...=sunSpecular,30
PROP_...=sunSpecularEXP,800

[SHADER_REPLACEMENT_...]
SHADER = ksWindscreen
MATERIALS = INT_Glass_Sponsor_trasp
PROP_... = bannerMode, 1
IS_TRANSPARENT = 1



; For demonstration purposes letâ€™s replace interior rear view mirror with a mirror with extra features:

; Hide original mirror mesh
[SHADER_REPLACEMENT_...]
MESHES = Extra_Mirror_SUB1
LAYER = 10
ACTIVE = $" read('csp/version', 0) >= 1709 "

; Create a new mirror mesh
[INCLUDE: common/displays.ini]
[DisplayShape]
MeshName = __mirror_display_mesh
ScreenScale = 256
ScreenAspectRatio = 0.5
TreatTextureAsHDR = 1
P1 = -0.033037, 0.853015, 1.069863  ; four corners of new mirror
P2 = -0.109149, 0.844854, 1.013162  ; hold alt and click with objects inspector to get in-car coordinate
P3 = -0.109451, 0.773587, 1.023871  ; pro tip: with 0.1.76, hold Shift to get six digits after the delimiter
P4 = -0.033524, 0.781760, 1.080841

; Change this new screen to use a nice shader
[Material_DigitalScreen]
Meshes=__mirror_display_mesh
MatrixType = VA
ScreenScale = 240
Emissive = 2.5

[RENDERING_CAMERA_0]
DYNAMIC_TEXTURE_ID = rear_view_0
POSITION = 0.0612, 0.758, -1.55
DIRECTION = 0, 0, -1
REFRESH_RATE = 25
FOV = 90
RESOLUTION = 1280, 720
ACTIVE_BY_DEFAULT = 0
WITH_LIGHTING = 1

[RENDERING_CAMERA_1]
DYNAMIC_TEXTURE_ID = front_view_0
POSITION = -0.076, 0.373, 2.77
DIRECTION = 0, 0, 1
REFRESH_RATE = 25
FOV = 90
RESOLUTION = 1280, 720
ACTIVE_BY_DEFAULT = 0
WITH_LIGHTING = 1

[TEXTURE_PREPROCESSING_0]
DYNAMIC_TEXTURE_ID = rear_view_0_post
TEXTURE_SOURCE = dynamic::rear_view_0
RESOLUTION = 1280, 720
EFFECT = FISHEYE
INTENSITY = 1.2
EXPOSURE = 1
BRIGHTNESS = 0.7
SATURATION = 0.6
GAMMA = 1.5

[TEXTURE_PREPROCESSING_1]
DYNAMIC_TEXTURE_ID = front_view_0_post
TEXTURE_SOURCE = dynamic::front_view_0
RESOLUTION = 1280, 720
EFFECT = FISHEYE
INTENSITY = 1.2
EXPOSURE = 1
BRIGHTNESS = 0.7
SATURATION = 0.6
GAMMA = 1.5

[SCRIPTABLE_DISPLAY_...]
MESHES = __mirror_display_mesh
RESOLUTION = 512, 512
DISPLAY_POS = 0, 0
DISPLAY_SIZE = 512, 512
SKIP_FRAMES = 0
SCRIPT = '
--[[
  Written by x4fab as an early prototype.
  Modified by @CheesyManiac to improve and include new functions that arrived thanks to x4fab.

  Please use this an example, and don"t try sell it.
]]

-- Buttons on display
local displayMesh = display.interactiveMesh{ mesh = "Extra_Mirror_SUB0", resolution = vec2(512, 128) }
local btnModeSwitch =  displayMesh.clicked(vec2(254, 7), vec2(45, 26))
local btnMenu = displayMesh.clicked(vec2(200, 7), vec2(45, 26))
local btnMinus = displayMesh.clicked(vec2(308, 7), vec2(45, 26), 0.15)
local btnPlus = displayMesh.clicked(vec2(363, 7), vec2(45, 26), 0.15)
local btnTurnOff = displayMesh.clicked(vec2(418, 7), vec2(45, 26))


local selectedOverlay = 1
local selectedCamera = 1
local updateDelay = 0
local overlayText = ""

local pitlaneBlink = false
setInterval(function ()
  pitlaneBlink = not pitlaneBlink
end, 0.33)


function modeMirror(dt)

  if selectedCamera == 1 then
    ac.setRenderingCameraActive("RENDERING_CAMERA_0", true)
    ac.setRenderingCameraActive("RENDERING_CAMERA_1", false)

    --draw the camera view
    display.image{
      image = "dynamic::rear_view_0_post",
      pos = vec2(0, 0),
      size = vec2(512, 512),
      color = rgbm(0.8,0.8,0.8,1),
      uvStart = vec2(0, 0),
      uvEnd = vec2(1, 1)
    }
  elseif selectedCamera == 2 then
    ac.setRenderingCameraActive("RENDERING_CAMERA_0", false)
    ac.setRenderingCameraActive("RENDERING_CAMERA_1", true)

    --draw the camera view
    display.image{
      image = "dynamic::front_view_0_post",
      pos = vec2(0, 0),
      size = vec2(512, 512),
      color = rgbm(0.8,0.8,0.8,1),
      uvStart = vec2(0, 0),
      uvEnd = vec2(1, 1)
    }
  end


  
  -- And draw some stats in the bottom right corner
  if updateDelay <= 0 then
    updateDelay = 0.5
    overlayText = selectedOverlay == 1 and string.format("%03d km/h", car.speedKmh)
      or selectedOverlay == 2 and string.format("%05.1f L", car.fuel)
      or selectedOverlay == 3 and ac.lapTimeToString(car.lapTimeMs)
  else
    updateDelay = updateDelay - dt
  end
  ui.drawRectFilled(
    vec2(280,440), vec2(520,520), rgbm(1,1,1,0.25), 10
  )
  display.text{
    text = overlayText,
    pos = vec2(0, 450),
    color = rgb(0, 0, 0),
    letter = vec2(24, 64),
    font = "aria",
    width = 512,
    alignment = 0.93,
    spacing = -6
  }

  if (car.isInPitlane or car.manualPitsSpeedLimiterEnabled) and pitlaneBlink then
    display.rect({ pos = vec2(0, 0), size = vec2(512, 100), color = rgbm(1,1,1,1)})
    ui.drawLine(vec2(0,100), vec2(512,100), rgbm.colors.black, 3)
    display.text({
      text = "PIT",
      pos = vec2(0, 24),
      letter = vec2(24, 64),
      font = "aria",
      color = rgbm.colors.black,
      alignment = 0.5,
      width = 512,
      spacing = 0
    })
  elseif (car.isInPitlane or car.manualPitsSpeedLimiterEnabled) and not pitlaneBlink then
      display.rect({ pos = vec2(0, 0), size = vec2(512, 100), color = rgbm(1,0,0,1)})
      ui.drawLine(vec2(0,100), vec2(512,100), rgbm.colors.black, 3)
      display.text({
          text = "PIT",
          pos = vec2(0, 24),
          letter = vec2(24, 64),
          font = "aria",
          color = rgbm.colors.white,
          alignment = 0.5,
          width = 512,
          spacing = 0
        })
  end

  if btnMinus() then 
    selectedOverlay = selectedOverlay - 1
    if selectedOverlay == 0 then 
      selectedOverlay = 3
    end
  end
  if btnPlus() then 
    selectedOverlay = selectedOverlay + 1
    if selectedOverlay == 4 then 
      selectedOverlay = 1
    end
  end
  if btnMenu() then 
    selectedCamera = selectedCamera + 1
    if selectedCamera == 3 then
      selectedCamera = 1
    end
  end
end


-- Second mode for customizing ABS, TC, and brake bias
local selectedItem = 1
function modeConfig(dt)
  -- Disable real mirror in this mode
  ac.setRenderingCameraActive("RENDERING_CAMERA_0", false)
  --draw menu background
  ui.drawRectFilled(vec2(0,0), vec2(512,512), rgbm(0.1,0.1,0.1,1))


  local colorSelected = rgbm(1, 0, 0, 1)
  local colorNotSelected = rgbm(1, 1, 1, 1)
  if btnMenu() then
    selectedItem = selectedItem + 1
    if selectedItem == 4 then
      selectedItem = 1
    end
  end

  --draw selected item box
  display.rect{
    pos = vec2(0, 40 + (selectedItem - 1) * 140),
    size = vec2(512, 140),
    color = colorSelected
  }

  --draw ABS
  display.text{
    text = car.absMode == 0 and "ABS: DISABLED" or string.format("ABS:        %02d/12", car.absMode),
    pos = vec2(40, 70),
    letter = vec2(24, 64),
    color = rgb(1, 1, 1),
    font = "aria",
  }
  display.horizontalBar{ 
    pos = vec2(40, 70+68), 
    size = vec2(432, 8), 
    delta = 6, 
    activeColor = rgb(1, 1, 1), 
    inactiveColor = rgb(0.2, 0, 0), 
    total = 12, 
    active = car.absMode 
  }
    --draw TC
    display.text{
      text = car.tractionControlMode == 0 and "TC: DISABLED" or string.format("TC:         %02d/12", car.tractionControlMode),
      pos = vec2(40, 210),
      letter = vec2(24, 64),
      color = rgb(1, 1, 1),
      font = "aria",
    }
    display.horizontalBar{ 
      pos = vec2(40, 210+68), 
      size = vec2(432, 8), 
      delta = 6, 
      activeColor = rgb(1, 1, 1), 
      inactiveColor = rgb(0.2, 0, 0), 
      total = 12, 
      active = car.tractionControlMode
    }

  --Draw Brake Bias
  local range = car.brakesBiasLimitUp - car.brakesBiasLimitDown
  display.text{
    text = string.format("BRAKE BIAS: %.1f%%", car.brakeBias * 100),
    pos = vec2(40, 350),
    letter = vec2(24, 64),
    color = rgb(1, 1, 1),
    font = "aria",
  }
  display.horizontalBar{ 
    pos = vec2(40, 350+68), 
    size = vec2(432, 8), 
    delta = 1, 
    activeColor = rgb(1, 1, 1), 
    inactiveColor = rgb(0.2, 0, 0), 
    total = math.ceil(range / car.brakesBiasStep), 
    active = math.ceil((car.brakeBias - car.brakesBiasLimitDown) / car.brakesBiasStep) 
  }
  if selectedItem == 1 then
    if btnMinus() and car.absMode > 0 then ac.setABS(car.absMode - 1) end  
    if btnPlus() then ac.setABS(car.absMode + 1) end
  elseif selectedItem == 2 then
    if btnMinus() and car.tractionControlMode > 0 then ac.setTC(car.tractionControlMode - 1) end  
    if btnPlus() then ac.setTC(car.tractionControlMode + 1) end
  elseif selectedItem == 3 then
    if btnMinus() then ac.setBrakeBias(car.brakeBias - car.brakesBiasStep) end  
    if btnPlus() then ac.setBrakeBias(car.brakeBias + car.brakesBiasStep) end
  end
end

-- Storing current mode in variable
local currentMode = modeMirror
local isTurnedOff = false
function update(dt)
  if btnModeSwitch() then
    currentMode = currentMode == modeMirror and modeConfig or modeMirror
    isTurnedOff = false
  end
  if btnTurnOff() then
    isTurnedOff = not isTurnedOff
  end
  if isTurnedOff then
    ac.setRenderingCameraActive("RENDERING_CAMERA_0", false)
    ac.setRenderingCameraActive("RENDERING_CAMERA_1", false)
    currentMode = modeMirror
    ui.drawRectFilled(vec2(0,0), vec2(512,512), rgbm(0.1,0.1,0.1,1))
  else
    currentMode(dt)
  end
end

ac.debug("CSP Version: ", ac.getPatchVersion())
if ac.getPatchVersionCode() > 2146 and ac.getPatchVersionCode() <= 2260 then
  ac.log("INCORRECT CSP VERSION, DISPLAY WILL NOT FUNCTION")
  ac.log("Please change to a build before 1.80p108 or after 1.80p122")
end
'

[SHADER_REPLACEMENT_...]
MESHES= LIGHT_Rain
SHADER= ksPerPixelReflection

[EMISSIVE_...]
INPUT='calc:max(SPEEDLIMITER, WIPERS_MODE)-1'
NAME= LIGHT_Rain
BLINKING_PATTERN= (|0=0|0.499=0.0|0.5=1|1=1|)
BLINKING_DURATION=0.4
COLOR=1,0,0,3
