[EXTRA_FX]
MASK_GBUFFER = GEO_headlights_glass

[WIPERS]
FRONT_0=GEO_wiperF_arm_2
FRONT_1=GEO_wiperF_arm_6

[INCLUDE: common/materials_carpaint.ini]
CarPaintMaterial=EXT_carpaint
CarPaintVersionAware = 4

[Material_CarPaint_Metallic]
ClearCoatThickness=0.2
FlakesK=0.5

[SHADER_REPLACEMENT_...]
MATERIALS = INT_plastic, INT_plastic_blue, EXT_plastic, EXT_Glass_Mask, INT_rubber, EXT_chrome, INT_carpet
DOUBLE_FACE_SHADOW_BIASED = 1

[INCLUDE: common/materials_glass.ini]
ExteriorGlassHeadlightsMaterials=EXT_lights_glasses
ExteriorGlassFilmedMaterials=EXT_glass
[Material_Glass]
Materials=EXT_lights_glasses_rear
FilmIOR=2.2
MaskPass=1
; Refraction = 1
MaskPassColor=200,0,0
PROP_... = extColoredBaseReflection, 0.5
PROP_... = extColoredReflection, 0.5

[INCLUDE: common/materials_interior.ini]
[Material_Carbon]
Materials=INT_carbon
ClearCoatF0=0.35
DetailScale=900
[Material_Metal_v2]
Materials=INT_metal_nodet
DetailScale=0
CubemapReflectionBlur=0.8
[Material_Leather]
Materials=INT_leather,INT_leather_seat
Brightness=0.35
[Material_Leather]
Materials=INT_plastic_color
ColorSource=DIFFUSE
Brightness=0.6
[Material_Velvet_v2]
Materials=INT_alcnt,INT_alcnt_seat
Brightness=0.35
[Material_Plastic]
Materials=INT_plastic,INT_plastic_nodet

[INCLUDE: common/selflighting.ini]
[SelfLight_Headlights]
POSITION=0, 0.65, 1.95
DIRECTION=0,0,1
RANGE=0.3
SPOT=120
BIND_TO_HEADLIGHTS=1
MIRROR=0.7
[SelfLight_Headlights]
POSITION=0, 0.65, 2.0
RANGE=0.3
SPOT=120
BIND_TO_HEADLIGHTS=0
MIRROR=0.47

[INCLUDE: common/materials_license_plate.ini]
[Material_LicensePlate_Europe]

[LIGHT_LICENSEPLATE]
RANGE = 0.4

[SHADER_REPLACEMENT_...]
MATERIALS = EXT_lights_chrome_rear
PROP_... = extColoredBaseReflection, 1
PROP_... = extColoredReflection, 1
PROP_... = extExtraSharpLocalReflections, -0.001

[INCLUDE: common/custom_emissive.ini]
[CustomEmissive]
Meshes = FRONT_LIGHT_3
Resolution = 1024, 1024
MirrorOffset = -0.5
@ = CustomEmissive_Rect, Channel = 3, Mirror, Start = "414, 206", Size = "400, 762"
@ = TurningLightsFront, Channel = 3

[CustomEmissiveExtra]
@ = CustomEmissiveExtra_TurnArrows, Position = '0.375, 0.93, 0.616', Gap = 0.04, Normal = '0, 0.3, -1'
@ = CustomEmissiveExtra_Icon, Position = '0.35, 0.935, 0.62', Size = 0.01, Role = DashWarningTC
@ = CustomEmissiveExtra_Icon, Position = '0.3651, 0.935, 0.62', Size = 0.01, Role = HIGHBEAM, Icon = HighBeams
Brightness = 0.02

[PARTICLES_FX_EXHAUST_0]
POSITION = 0.623, 0.355, -2.29

[PARTICLES_FX_EXHAUST_1]
POSITION = 0.506, 0.336, -2.24

[PARTICLES_FX_EXHAUST_2]
POSITION = -0.506, 0.336, -2.24

[PARTICLES_FX_EXHAUST_3]
POSITION = -0.623, 0.355, -2.29

[SHADER_REPLACEMENT_...]
MESHES = SHIFT_0, SHIFT_1, SHIFT_2
LAYER = 10

[Material_DigitalScreen]
Materials = INT_display
ScreenScale = 600
ScreenAspectRatio = 0.5
MatrixType = TN

[CAR_STEREO_0]
ACTIVE = $" read('csp/version', 0) >= 1279 "

MESHES = GEO_displays
RESOLUTION = 1024, 512
DISPLAY_POS = 512, 113
DISPLAY_SIZE = 512, 222
COLOR = 1, 1, 1
FADE_WHEN_INACTIVE = 0.95
DITHERING = 2

; background
RECT_4 = 1
RECT_4_START = 0, 0
RECT_4_SIZE = 512, 222
RECT_4_COLOR = 0, 0, 0.024, 1
RECT_4_Z_INDEX = -1000

; main text
TEXT_CSP_0 = "{Artist} - {Track}"
TEXT_CSP_0_NOALBUM = "{Artist} - {Track}"
TEXT_CSP_0_NOARTIST = "{Track}"
TEXT_CSP_0_FALLBACK = ""
TEXT_CSP_0_ALIGN_LAYOUT = 0.5
TEXT_CSP_0_START = 20, 155
TEXT_CSP_0_SIZE = 460, 48
TEXT_CSP_0_FONT_TYPE = ITALIC
TEXT_CSP_0_Z_INDEX = 10
TEXT_CSP_0_SCALE = 0.8, 0.9
TEXT_CSP_0_BOLD = 1

; track position
TEXT_CSP_1 = "{Position:%02d:%02d//--:--}"
TEXT_CSP_1_ALIGN_LAYOUT = 0
TEXT_CSP_1_START = 135, 196
TEXT_CSP_1_SIZE = 460, 48
TEXT_CSP_1_FONT_TYPE = MONOSPACE
TEXT_CSP_1_Z_INDEX = 10
TEXT_CSP_1_SCALE = 0.5
TEXT_CSP_1_BOLD = 1

; track duration
TEXT_CSP_2 = "{Duration:%02d:%02d//--:--}"
TEXT_CSP_2_ALIGN_LAYOUT = 1, 0
TEXT_CSP_2_START = 185, 196
TEXT_CSP_2_SIZE = 180, 48
TEXT_CSP_2_FONT_TYPE = MONOSPACE
TEXT_CSP_2_Z_INDEX = 10
TEXT_CSP_2_SCALE = 0.5
TEXT_CSP_2_BOLD = 1

; progress bar background
RECT_5 = 1
RECT_5_START = 194, 208
RECT_5_SIZE = 113, 1
RECT_5_Z_INDEX = 12
RECT_5_COLOR = 1, 1, 1, 1

; progress bar background
RECT_6 = 1
RECT_6_START = 194, 204
RECT_6_SIZE = 113, 5
RECT_6_Z_INDEX = 11
RECT_6_COLOR = 1, 0, 0, 1
RECT_6_SCALE_WITH_PROGRESS = 1, 0

; album cover in the middle
ALBUM_COVER_0 = 1
ALBUM_COVER_0_START = 185, 20
ALBUM_COVER_0_SIZE = 130, 130
ALBUM_COVER_0_Z_INDEX = -1
ALBUM_COVER_0_FALLBACK = MUSIC
ALBUM_COVER_0_FALLBACK_COLOR = 0.3, 0.3, 0.3, 1
ALBUM_COVER_0_FALLBACK_BACKGROUND = 0.05, 0.05, 0.05, 1
ALBUM_COVER_0_FALLBACK_SIZE = 28

; shadow at the bottom of middle album cover
RECT_0 = 1
RECT_0_START = 185, 20
RECT_0_SIZE = 130, 130
RECT_0_Z_INDEX = -0.5
RECT_0_COLOR = 0, 0, 0.024, 0
RECT_0_COLOR_BL = 0, 0, 0.024, 1
RECT_0_COLOR_BR = 0, 0, 0.024, 1

; animation below album cover
ANIMATION_0 = 12, 8
ANIMATION_0_START = 150, 105
ANIMATION_0_BLOCK = 14, 4
ANIMATION_0_MARGIN = 3, 3
ANIMATION_0_BASE_ROW = BOTTOM

; reflected animation below album cover
ANIMATION_1 = 12, 8
ANIMATION_1_START = 150, 215
ANIMATION_1_BLOCK = 14, -4
ANIMATION_1_MARGIN = 3, -3
ANIMATION_1_BASE_ROW = BOTTOM
ANIMATION_1_COLOR = 1, 1, 1, 0.2
ANIMATION_1_Z_INDEX = -20

; gradient on top of reflected animation for fading
RECT_1 = 1
RECT_1_START = 100, 150
RECT_1_SIZE = 300, 30
RECT_1_Z_INDEX = -15
RECT_1_COLOR = 0, 0, 0.024, 0
RECT_1_COLOR_BL = 0, 0, 0.024, 1
RECT_1_COLOR_BR = 0, 0, 0.024, 1

; fully covering its distant bit
RECT_2 = 1
RECT_2_START = 100, 180
RECT_2_SIZE = 300, 60
RECT_2_Z_INDEX = -15
RECT_2_COLOR = 0, 0, 0.024, 1

; larger album cover for background, drawn on top of reflected animation and its gradient, very transparent
ALBUM_COVER_1 = 1
ALBUM_COVER_1_START = 0, -150
ALBUM_COVER_1_SIZE = 600, 600
ALBUM_COVER_1_COLOR = 1, 1, 1, 0.04
ALBUM_COVER_1_Z_INDEX = -10

; extra covering gradient for that background cover
RECT_3 = 1
RECT_3_START = 0, -150
RECT_3_SIZE = 500, 600
RECT_3_Z_INDEX = -9
RECT_3_COLOR = 0, 0, 0.024, 0
RECT_3_COLOR_TL = 0, 0, 0.024, 1
RECT_3_COLOR_BL = 0, 0, 0.024, 1

DYNAMIC_OPACITY = 0  ; disabling component from the start, relying on scriptable display to activate it when needed

[INCLUDE: common/navigators.ini]
[NAVIGATOR_0 : Navigator_StyleSygic]
ACTIVE = $" read('csp/version', 0) >= 1564 "
Meshes = GEO_displays
@ = Navigator_Size, Resolution = "1024, 512", Size = "512, 222", Offset = "470, 113", Scale = 2    
Brightness = 0.7
RESOLUTION_LIMIT = 1024, 512
DYNAMIC_OPACITY = 0  ; disabling component from the start, relying on scriptable display to activate it when needed

[NAVIGATOR_0]
; Slightly alter template to remove dark bar on the left
@ = Navigator_Size, Resolution = "1024, 512", Size = "512, 222", Offset = "470, 113", Scale = 2  
@ = Navigator_Component, ComponentID = CURRENT_TRACK
@ = Navigator_FadingComponent, Up
@ = Navigator_ComponentLayout, Left = 100, Right = 40, Top = 0, Height = 120,\
	Padding = "92, 10, 20", Align = "0, 0.5", IconCenter = "48, 50%", IconSize = 40
TIME_SIZE = 0, 0
BTN_PHONE_ENABLED = 0
MAP_POS = 0, 0
MAP_SIZE = 1024, 444

[SCRIPTABLE_DISPLAY_...]
; Example of scriptable display
MESHES = GEO_displays
KEEP_BACKGROUND = 1 ; Stop CSP from painting original texture as background to get stereo and navigator 
  ; to work. Script will need to reset background manually or things will leave trails.
INTERACTIVE = 1 ; Keep track of mouse position over the display (adds extra cost, especially on high poly meshes)
FORCE_UPDATE_AFTER = NAVIGATOR_0
SCRIPT = '
local colorCover = rgbm(0, 0, 0, 1)
local colorWhite = rgbm(1, 1, 1, 1)

local buttons = {
  { points = { vec2(287, 114), vec2(477, 113), vec2(488, 152), vec2(287, 152) } },
  { points = { vec2(287, 152), vec2(488, 152), vec2(495, 190), vec2(287, 190) }, screen = "CAR_STEREO_0" },
  { points = { vec2(287, 190), vec2(495, 190), vec2(500, 228), vec2(287, 228) }, title = "Phone is not connected" },
  { points = { vec2(287, 228), vec2(500, 228), vec2(504, 266), vec2(287, 266) }, screen = "NAVIGATOR_0" },
  { points = { vec2(287, 266), vec2(504, 266), vec2(506, 304), vec2(287, 304) }, title = "No apps are installed" },
  { points = { vec2(287, 304), vec2(506, 304), vec2(506, 342), vec2(287, 342) } },
}

local startingMode = tonumber(ac.loadDisplayValue("startingMode", 4)) or 1
local previousSection = startingMode
local currentSection = startingMode
local activationProgress = 0
local gearsGrowth = {}

function update(dt)
  -- Updating state
  if currentSection ~= previousSection then
    activationProgress = math.max(0, activationProgress - dt * 3)
    if activationProgress == 0 then
      ac.setDynamicTextureShift(buttons[previousSection].screen, 0)
      previousSection = currentSection
    end
  elseif activationProgress < 1 then
    activationProgress = math.min(1, activationProgress + dt * 3)
  end
  ac.setDynamicTextureShift(buttons[previousSection].screen, activationProgress)

  -- A bit of a placeholders (temporary?) for missing sections
  if buttons[previousSection].screen == nil then
    -- Restoring original background
    display.image{ image = "car::INT_display.dds", pos = vec2(), size = vec2(1024, 512) }

    if previousSection == 6 then
      settings()
    elseif buttons[previousSection].title ~= nil then
      ui.pushStyleVar(ui.StyleVar.Alpha, activationProgress)
      display.rect{ pos = vec2(), size = vec2(1024, 512), color = rgbm(0, 0, 0, 0.7) }
      display.text{ 
        text = buttons[previousSection].title, 
        pos = vec2(460, 220), 
        letter = vec2(11, 22),
        font = "sls",
        width = 400,
        alignment = 0.5
      }
      ui.popStyleVar()
    end
  end

  -- Reset texture to its original state, leaving area with stereo or navigator intact
  display.image{
    image = "car::INT_display.dds",
    pos = vec2(),
    size = vec2(1024 * 0.467, 512),
    uvStart = vec2(),
    uvEnd = vec2(0.467, 1)
  }

  -- Buttons, also useful to recreate the curved mask
  local hoveredButton = 0
  ui.beginTextureSaturationAdjustment()         -- adjusting texture to hide original selection
  ui.setShadingOffset(2, -0.5)                  -- this one is for color×2-0.5, along with desaturation hides selection
  ui.beginTextureShade("car::INT_display.dds")  -- all shapes drawn here will get a texture mapped on top of them
  for i = 1, #buttons do
    local btn = buttons[i].points
    if ui.rectHovered(btn[1], btn[3]) then
      hoveredButton = i
      if ui.mouseClicked() then currentSection = i end
    end
    ui.drawQuadFilled(btn[1], btn[2], btn[3], btn[4], colorWhite)
  end
  ui.endTextureSaturationAdjustment(0)
  ui.endTextureShade(vec2(), vec2(1024, 512))
  ui.setShadingOffset()

  -- Highlight for selected button
  if currentSection ~= 0 then
    local btn = buttons[currentSection].points
    ui.beginGradientShade()
    ui.drawQuadFilled(btn[2] - vec2(48, 0), btn[2], btn[3], btn[3] - vec2(48, 0), rgbm(1, 1, 1, 0.5))
    ui.endGradientShade(btn[2] - vec2(48, 0), btn[3], rgbm(1, 0, 0, 1), rgbm(1, 0.3, 0.3, 1))
  end

  -- Highlight for hovered button
  if hoveredButton ~= 0 and hoveredButton ~= currentSection then
    local btn = buttons[hoveredButton].points
    ui.beginGradientShade()
    ui.drawQuadFilled(btn[2] - vec2(48, 0), btn[2], btn[3], btn[3] - vec2(48, 0), rgbm(1, 1, 1, 0.1))
    ui.endGradientShade(btn[2] - vec2(48, 0), btn[3], rgbm(1, 0, 0, 1), rgbm(1, 0.3, 0.3, 1))
  end

  -- Restoring lower half of the texture as well
  display.image{
     image = "car::INT_display.dds",
     pos = vec2(0, 336),
     size = vec2(1024, 176),
     uvStart = vec2(0, 336 / 512),
     uvEnd = vec2(1, 1)
  }

  -- Odometer
  display.rect{ 
    pos = vec2(38, 222),
    size = vec2(47, 20), 
    color = colorCover 
  }
  display.text{
    text = math.floor(car.distanceDrivenTotalKm),
    pos = vec2(38, 222),
    letter = vec2(10, 22),
    font = "c7_mid",
    width = 46,
    alignment = 1,
    spacing = -1
  }

  -- Temperature
  local temperature = ac.getSimState().ambientTemperature

  display.rect{ 
    pos = vec2(292, 348), 
    size = vec2(45, 31), 
    color = colorCover
  }
  display.text{
    text = math.floor(temperature),
    pos = vec2(292, 346),
    letter = vec2(23, 51),
    font = "arial_big",
    width = 48,
    alignment = 1
  }

  display.rect{ 
    pos = vec2(344, 365), 
    size = vec2(11, 14), 
    color = colorCover
  }
  display.text{
    text = math.floor((temperature - math.floor(temperature)) * 10),
    pos = vec2(344, 364),
    letter = vec2(11, 22),
    font = "arial_big"
  }

  -- Clock instead of temperature on the right
  display.rect{ 
    pos = vec2(946, 344), 
    size = vec2(71, 38), 
    color = colorCover
  }

  display.text{ 
    text = string.format("%02d:%02d", sim.timeHours, sim.timeMinutes),
    pos = vec2(900, 346), 
    letter = vec2(23, 51),
    font = "arial_big",
    width = 116,
    alignment = 0.5
  }

  -- Reception indicator to reduce in tunnels or with bad weather
  local satelliteOcclusion = ac.estimateSatelliteOcclusion()
  if satelliteOcclusion < 0.25 then
    display.rect{ pos = vec2(340.8, 382.4), size = vec2(16.8, 19.8), color = colorCover }
  elseif satelliteOcclusion < 0.5 then
    display.rect{ pos = vec2(346.1, 382.1), size = vec2(11.7, 19.4), color = colorCover }
  elseif satelliteOcclusion < 0.75 then
    display.rect{ pos = vec2(351.5, 382.4), size = vec2(5.7, 19.1), color = colorCover }
  end

  -- Shift bar
  local shiftProgress = math.lerpInvSat(car.rpm, 5000, 6250)
  display.image{
    image = "car::INT_display.dds",
    pos = vec2(37, 73),
    size = vec2(228 * shiftProgress, 47),
    uvStart = vec2(785.3, 7.3) / vec2(1024, 512),
    uvEnd = (vec2(785.3, 7.3) + vec2(233 * shiftProgress, 53.3)) / vec2(1024, 512),
    color = rgbm(shiftProgress, shiftProgress, shiftProgress, 1)
  }
  if shiftProgress > 0 then ac.boostFrameRate() end

  -- Gears (why are they there, where is rear one lol?), masking original selection and adding custom
  display.image{
     image = "car::INT_display.dds",
     pos = vec2(594, 383.5),
     size = vec2(125, 23.4),
     uvStart = vec2(596.5 / 1024, 383.5 / 512),
     uvEnd = vec2((596.5 + 5.8) / 1024, (383.5 + 23.4) / 512)
  }

  for i = -1, 6 do
    local gearText = i == -1 and "R" or i == 0 and "N" or i
    local isActive = car.gear == i

    gearsGrowth[i] = math.applyLag(gearsGrowth[i] or 0, isActive and 1 or 0.7, 0.9, dt)
    local size = gearsGrowth[i]

    display.text{
      text = gearText,
      pos = vec2(605 + i * 17 + 11.5 * (1 - size) / 2, 390 + 10 * (1 - size)), 
      letter = vec2(11.5 * size, 25.5 * size),
      font = "arial_big",
      color = isActive and rgbm(1, 0.1, 0.1, 1) or rgbm(1, 1, 1, 1)
    }
  end
end

function settings()
  local whiteColor = rgbm(1, 1, 1, 1)
  local accentColor = rgbm(1, 0.1, 0.1, 1)

  function radioButton(text, pos, mode)
    display.text{ text = text, pos = pos, letter = vec2(11, 22), font = "sls" }

    local circlePos = pos + vec2(-20, 10)
    ui.drawCircleFilled(circlePos, 10, whiteColor, 20)

    local hovered = ui.rectHovered(circlePos - 10, circlePos + vec2(110, 10))
    if startingMode == mode then
      ui.drawCircleFilled(circlePos, 8, accentColor)
    elseif hovered then
      ui.drawCircleFilled(circlePos, 8, rgbm(0.4, 0.4, 0.4, 1))
      if ui.mouseClicked() then
        startingMode = mode
        ac.saveDisplayValue("startingMode", mode)
      end
    end
  end 

  ui.pushStyleVar(ui.StyleVar.Alpha, activationProgress)
  display.rect{ pos = vec2(), size = vec2(1024, 512), color = rgbm(0, 0, 0, 0.7) }
  display.text{ text = "Starting mode:", pos = vec2(560, 120), letter = vec2(11, 22), font = "sls" }
  radioButton("Radio", vec2(590, 150), 1)
  radioButton("Media", vec2(590, 180), 2)
  radioButton("Navigator", vec2(590, 210), 4)
  ui.popStyleVar()
end' 
